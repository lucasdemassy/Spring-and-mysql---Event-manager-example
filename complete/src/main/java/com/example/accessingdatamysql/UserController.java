package com.example.accessingdatamysql;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;


@Controller	// This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
        
        @Autowired // This means to get the bean called eventRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
        private EventRepository eventRepository;

	@PostMapping(path="/create") // Map ONLY POST Requests
	public String CreateNewUser (@RequestParam String username
			, @RequestParam String email, @RequestParam String eventname) {
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request
            User n = new User();
            n.setName(username);
            n.setEmail(email);
            
            List<Event> events = (List<Event>) eventRepository.findAll();
            Event event = events.get(1);       
            for(int i = 0; i < events.size(); i++){
                if(events.get(i).getName().equals(eventname)){
                    event = events.get(i);
                } else {
                }
            }
            n.addEvent(event);
            event.addUser(n);
            userRepository.save(n);
            return "redirect:all";
	}
        
        
        @PostMapping(path="/add") // Map ONLY POST Requests
	public String addNewUser (@RequestParam String username
			, @RequestParam String eventname, Model model) {
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request
            List<User> users = (List<User>) userRepository.findAll();   
            User user = null;
            for(int i = 0; i < users.size(); i++){
                if(users.get(i).getName().equals(username)){
                    user = users.get(i);
                } else {
                }
            }
            
            List<Event> events = (List<Event>) eventRepository.findAll();  
            Event event = null;
            for(int i = 0; i < events.size(); i++){
                if(events.get(i).getName().equals(eventname)){
                    event = events.get(i);
                } else {
                }
            }
            event.addUser(user);
            user.addEvent(event);
            eventRepository.save(event);
            return "redirect:all";
	}
        

	@GetMapping(path="/all")
	public String getAllUsers(Model model) {
            // This returns a JSON or XML with the users
            Iterable<User> json = userRepository.findAll();
            model.addAttribute("json", json);
            return "all";
	}
                
        @PostMapping(path="/delete") // Map ONLY POST Requests
	public String deleteUser (@RequestParam String username) {
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request
            List<User> users = (List<User>) userRepository.findAll();   
            User user = null;
            for(int i = 0; i < users.size(); i++){
                if(users.get(i).getName().equals(username)){
                    user = users.get(i);
                } else {
                }
            }
            userRepository.delete(user);
            return "redirect:all";
	}
        
        @GetMapping("/register/user")
	public String greeting(Model model) {
            Iterable<Event> events = eventRepository.findAll();
            Iterable<User> users = userRepository.findAll();
            model.addAttribute("users", users);
            model.addAttribute("events", events);
            return "user";
	}
}
